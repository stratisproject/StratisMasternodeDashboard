@model Vote

<script type="text/javascript">
    function submitVote() {
        $.post("/sidechain-node/vote", $("#voteForm").serialize())
            .done(function (data) {
                $("#voteError").hide();
                var hash = $("#vote").val();
                $("#vote").val("");
                $("#hashLabel").text(hash);
                $("#federationVotes").modal('hide');
                $("#confirmationModal").modal('show');
            })
            .fail(function (result) {
                if (!!result.responseText) {
                    $("#voteError").text(result.responseText);
                    $("#voteError").show();
                    return;
                }
                $("#voteError").text("Failed to vote. Unknown error. Please try again and make sure nodes are running.");
                $("#voteError").show();
            });
    }
</script>

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">Federation Votes (PoA)</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">

        <div class="alert alert-danger" role="alert" style="display: none;" id="voteError">
        </div>
        <form id="voteForm" novalidate class="needs-validation">
            <div class="form-group">
                <label for="exampleInputEmail1">Contract Hash</label>
                <input asp-for="Hash" type="text" class="form-control" id="vote" aria-describedby="hashHelp" placeholder="Enter hash value" required>
                <small id="hashHelp" class="form-text text-muted">Paste contract hash to be whitelisted.</small>
                <div class="invalid-feedback">
                    Please provide a valid contract hash.
                </div>
            </div>
            <button type="button" class="btn btn-primary" onclick="submitVote()">Submit</button>
        </form>
        <label class="mt-3"><strong>Pending Votes :</strong></label>
        <div class="alert alert-danger" role="alert" style="display: none;" id="loadPendingVotesError">
        </div>
        <table class="table table-sm table-striped table-bordered" id="polls-table">
            <thead>
                <tr>
                    <th class="text-left">ID</th>
                    <th class="text-left">Hash</th>
                    <th class="text-center">Approved</th>
                    <th class="text-center">Votes In Favour</th>
                    <th class="text-center">Total Members</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int ordinal = 0;
                }
                @foreach (var poll in Model?.Polls ?? new List<PendingPoll>())
                {
                    <tr>
                        <td class="text-left">@(ordinal++)</td>
                        <td class="text-left ellipsis" style="min-width: 350px;" title="@poll.Hash">@poll.Hash</td>
                        <td class="text-center">@(poll.IsExecuted ? "Yes" : "No")</td>
                        <td class="text-center ellipsis">@(poll.IsExecuted ? "51%" : poll.PubKeysHexVotedInFavor.Count.ToString())</td>
                        <td class="text-center ellipsis">@Model.FederationMemberCount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>